"""
112. Path Sum
Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        if not root: return False
        
        def dfs(root, targetSum):
            if not root:
                if not targetSum: return True
                else: return False
            if root.left and root.right:
                return dfs(root.left, targetSum-root.val) or dfs(root.right, targetSum-root.val)
            else:
                if not root.right:
                    return dfs(root.left, targetSum-root.val)
                if not root.left:
                    return dfs(root.right, targetSum-root.val)
        return dfs(root, targetSum)
		
"""
125. Valid Palindrome
Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
"""
class Solution:
    def isPalindrome(self, s: str) -> bool:
        punctuation = "!@#$%^&*()_+<>?:.,;\/[]{}-`"
        for c in s:
            if c in punctuation:
                s = s.replace(c, "")
        s = s.replace(" ", "")
        s = s.replace('"', '')
        s = s.replace("'", "")
        s = s.lower()
        if s == s[::-1]:
            return True
        else:
            return False
			
class Solution:
    def isPalindrome(self, s: str) -> bool:
        p = ""
        for i in s.lower():
            if i.isalnum():
                p += i
        else:
            return p == p[::-1]
			
"""
168. Excel Sheet Column Title
Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.
"""
class Solution:
    def convertToTitle(self, n: int) -> str:
        abc="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        ans=""
        while n:
            n=n-1
            ans=abc[n%26]+ans
            n=n//26
        return ans
		
"""
169. Majority Element
"""
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = 0
        majorElement = None
        for num in nums:
            if count == 0:
                majorElement = num
            count += 1 if majorElement == num else -1
        return majorElement
		
"""
4. Median of Two Sorted Arrays
HARD
"""
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        out = nums1 + nums2
        out = sorted(out)
        n = len(out)
        if n == 1:
            return out[0]
        elif n%2 == 0:
            first_mid  = int(len(out) / 2) - 1
            second_mid = int(len(out) / 2)
            median = (out[first_mid] + out[second_mid]) / 2
        else:
            mid = int(len(out) / 2)
            median = out[mid]
        return median
		
"""
191. Number of 1 Bits
EASY
"""
class Solution:
    def hammingWeight(self, n: int) -> int:
        s = "{0:b}".format(n)
        count = 0
        for c in s:
            if c == '1':
                count += 1
        return count

"""
3. Longest Substring Without Repeating Characters
"""
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # key = character, value = most recently seen index with character
        visited = defaultdict(int)
        maxLen = 0
        i = 0
        for j, char in enumerate(s):
            # if char was already seen in visited dictionary
            if char in visited:
                # update left boundary i to this last seen index + 1
                i = max(i, visited[char]+1)
            # update the visited[char] to most recently seen index j, regardless if it's in visited
            visited[char] = j
            # update maxLen if our interval i, j is bigger
            maxLen = max(maxLen, j-i+1)
        return maxLen
		
"""
29. Divide Two Integers
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
"""
class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        if dividend == 0:
            return 0
        sign = 1 if ((dividend < 0) ^ (divisor < 0)) else 0
        dividend = abs(dividend)
        divisor  = abs(divisor)
        res = 0
        while dividend >= divisor:
            k = 0
            while dividend >= divisor << (k+1):
                k += 1
            dividend -= (divisor << k)
            res += 1 << k
        MAX_INT = (1 << 31)-1
        return -res if sign else (res if res <= MAX_INT else MAX_INT)
		

"""
34. Find First and Last Position of Element in Sorted Array
O(log n) runtime
"""
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def left_border(nums, target, left, right):
            while left+1 < right:
                mid = (left + right) // 2
                if nums[mid] < target:
                    left = mid
                else:
                    right = mid
            if nums[left] == target: return left
            if nums[right] == target: return right
            return -1
        
        def right_border(nums, target, left, right):
            while left + 1 < right:
                mid = (left + right) // 2
                if nums[mid] > target:
                    right = mid
                else:
                    left = mid
            if nums[right] == target: return right
            if nums[left] == target: return left
            return -1
        
        if len(nums) == 0:
            return [-1, -1]
        
        left = 0
        right = len(nums) - 1
        
        res_left = left_border(nums, target, left, right)
        if res_left != -1:
            res_right = right_border(nums, target, left, right)
        else:
            res_right = -1
        
        return [res_left, res_right]