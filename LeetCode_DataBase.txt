# LeetCode
# 183. Customers Who Never Order
# Write your MySQL query statement below
SELECT name as Customers
FROM Customers
WHERE id NOT IN (SELECT Customers.id FROM Customers RIGHT JOIN Orders ON Customers.id=Orders.customerId);

# 175. Combine Two Tables
select FirstName, LastName, City, State
from Person left join Address
on Person.PersonId = Address.PersonId;

# 176. Second Highest Salary
SELECT
    (SELECT DISTINCT
            Salary
        FROM
            Employee
        ORDER BY Salary DESC
        LIMIT 1 OFFSET 1) AS SecondHighestSalary
;

# 181. Employees Earning More Than Their Managers
SELECT e.name AS Employee FROM employee e 
INNER JOIN 
employee m ON e.managerid = m.id WHERE e.salary > m.salary;

# 182. Duplicate Emails
SELECT email FROM person
GROUP BY email
HAVING COUNT(email) > 1;

# 184. Department Highest Salary
SELECT d.name as Department, e.name as Employee, e.Salary AS Salary
FROM
(SELECT MAX(e1.salary) AS Salary, e1.DepartmentID FROM Employee e1 GROUP BY e1.departmentID) AS T,
Department d,
Employee e
WHERE
e.salary = t.salary AND d.id = t.departmentID AND d.id = e.departmentID

# 196. Delete Duplicate Emails
# Write your MySQL query statement below
WITH tmp AS
(
SELECT MIN(id) as Id, Email
FROM person
GROUP BY Email
)
DELETE FROM person
WHERE Id NOT IN (SELECT Id FROM tmp);

# Rising Temperature
SELECT w1.id
FROM weather w1
JOIN weather w2
WHERE w1.temperature > w2.temperature
AND DATEDIFF(w1.recorddate, w2.recorddate)=1

# 178. Rank Scores
# Write your MySQL query statement below
select score,
DENSE_RANK() OVER (ORDER BY score DESC) "rank"
from scores;

177. Nth Highest Salary
# 344 ms, 48.56% faster
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      with EmployeeSalaryRank AS
      (
      select ID, Salary, dense_rank() over (order by Salary Desc) as ranks
      from Employee
      )
      
      Select distinct Salary
      from EmployeeSalaryRank
      where ranks=N
  );
END

# 259 ms, 99.40% faster
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
      SELECT
      CASE WHEN COUNT(DISTINCT rnk)<N THEN NULL ELSE MIN(salary) END
      FROM (SELECT salary, DENSE_RANK() OVER(ORDER BY salary DESC) AS rnk
           FROM Employee) a WHERE rnk<=N
  );
END

# 595. Big Countries
SELECT name,population,area FROM World
WHERE population>25000000 OR area>3000000

# 596. Classes More Than 5 Students
select class from courses
group by class
having count(class) >= 5;

# 620. Not Boring Movies
select * from cinema
where id%2 != 0 and description != 'boring'
order by rating desc;

# 627. Swap Salary
UPDATE salary
SET sex = CASE WHEN sex='f' THEN 'm'
          ELSE 'f' END

# 1179
# Reformat Department Tables
# Write your MySQL query statement below
select id,
sum(case when month='Jan' then revenue else null end) Jan_Revenue,
sum(case when month='Feb' then revenue else null end) Feb_Revenue,
sum(case when month='Mar' then revenue else null end) Mar_Revenue,
sum(case when month='Apr' then revenue else null end) Apr_Revenue,
sum(case when month='May' then revenue else null end) May_Revenue,
sum(case when month='Jun' then revenue else null end) Jun_Revenue,
sum(case when month='Jul' then revenue else null end) Jul_Revenue,
sum(case when month='Aug' then revenue else null end) Aug_Revenue,
sum(case when month='Sep' then revenue else null end) Sep_Revenue,
sum(case when month='Oct' then revenue else null end) Oct_Revenue,
sum(case when month='Nov' then revenue else null end) Nov_Revenue,
sum(case when month='Dec' then revenue else null end) Dec_Revenue
from department
group by 1;
